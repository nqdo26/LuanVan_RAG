#!/usr/bin/env python3
"""
Test script cho RAG Server endpoints
Ki·ªÉm tra to√†n b·ªô ch·ª©c nƒÉng CRUD v·ªõi Pinecone synchronization
"""

import requests
import json
import time
from datetime import datetime

# Configuration
RAG_SERVER_URL = "http://localhost:8000"
TEST_CITY_ID = "test_city_123"
TEST_DESTINATION_ID = "test_dest_456"

def print_test_header(test_name):
    print(f"\n{'='*60}")
    print(f"üß™ TEST: {test_name}")
    print(f"{'='*60}")

def print_result(success, message, data=None):
    status = "‚úÖ PASS" if success else "‚ùå FAIL"
    print(f"{status}: {message}")
    if data:
        print(f"üìä Data: {json.dumps(data, indent=2, ensure_ascii=False)}")
    print("-" * 40)

def test_health_check():
    """Test basic health endpoints"""
    print_test_header("Health Check")
    
    try:
        # Test GET /
        response = requests.get(f"{RAG_SERVER_URL}/")
        if response.status_code == 200:
            print_result(True, "GET / endpoint working", response.json())
        else:
            print_result(False, f"GET / failed with status {response.status_code}")
        
        # Test HEAD /v1/keep-alive
        response = requests.head(f"{RAG_SERVER_URL}/v1/keep-alive")
        if response.status_code == 200:
            print_result(True, "HEAD /v1/keep-alive endpoint working")
        else:
            print_result(False, f"HEAD /v1/keep-alive failed with status {response.status_code}")
            
    except Exception as e:
        print_result(False, f"Health check failed: {str(e)}")

def test_ingest_destination():
    """Test destination ingestion with semantic chunking"""
    print_test_header("Destination Ingestion")
    
    # Sample destination data v·ªõi ƒë·∫ßy ƒë·ªß th√¥ng tin
    structured_data = {
        "description": "Ch√πa C·∫ßu H·ªôi An l√† m·ªôt trong nh·ªØng bi·ªÉu t∆∞·ª£ng n·ªïi ti·∫øng nh·∫•t c·ªßa ph·ªë c·ªï H·ªôi An. ƒê∆∞·ª£c x√¢y d·ª±ng v√†o th·∫ø k·ª∑ 16 b·ªüi c·ªông ƒë·ªìng ng∆∞·ªùi Nh·∫≠t, ch√πa c√≥ ki·∫øn tr√∫c ƒë·ªôc ƒë√°o k·∫øt h·ª£p gi·ªØa Nh·∫≠t B·∫£n v√† Vi·ªát Nam.",
        "highlight": "Ki·∫øn tr√∫c c·ªï k√≠nh, c·∫ßu c√≥ m√°i che, t∆∞·ª£ng kh·ªâ v√† ch√≥ canh g√°c",
        "services": "Tham quan, ch·ª•p ·∫£nh, mua v√© v√†o c·ª≠a",
        "cultureType": "Di t√≠ch l·ªãch s·ª≠, ki·∫øn tr√∫c c·ªï",
        "activities": "ƒêi b·ªô qua c·∫ßu, ch·ª•p ·∫£nh, t√¨m hi·ªÉu l·ªãch s·ª≠",
        "fee": "V√© v√†o c·ª≠a ph·ªë c·ªï H·ªôi An: 120,000 VNƒê",
        "usefulInfo": "N√™n ƒëi v√†o bu·ªïi s√°ng s·ªõm ho·∫∑c chi·ªÅu t·ªëi ƒë·ªÉ tr√°nh ƒë√¥ng ƒë√∫c, m·∫∑c trang ph·ª•c l·ªãch s·ª±",
        "tags": "di t√≠ch l·ªãch s·ª≠, ph·ªë c·ªï H·ªôi An, ch√πa c·∫ßu, ki·∫øn tr√∫c Nh·∫≠t B·∫£n",
        "openHour": "th·ª© hai: 07:00-18:00, th·ª© ba: 07:00-18:00, th·ª© t∆∞: 07:00-18:00, th·ª© nƒÉm: 07:00-18:00, th·ª© s√°u: 07:00-18:00, th·ª© b·∫£y: 07:00-18:00, ch·ªß nh·∫≠t: 07:00-18:00",
        "contactInfo": "Phone: +84 235 3861 540, Website: hoianworldheritage.org.vn, Facebook: , Instagram: "
    }
    
    payload = {
        "destinationId": TEST_DESTINATION_ID,
        "cityId": TEST_CITY_ID,
        "info": json.dumps(structured_data, ensure_ascii=False),
        "slug": "chua-cau-hoi-an",
        "name": "Ch√πa C·∫ßu H·ªôi An"
    }
    
    try:
        response = requests.post(f"{RAG_SERVER_URL}/v1/ingest", json=payload)
        if response.status_code == 200:
            result = response.json()
            print_result(True, f"Ingestion successful, processed {result.get('chunks_processed', 0)} chunks", result)
        else:
            print_result(False, f"Ingestion failed with status {response.status_code}", response.text)
            
    except Exception as e:
        print_result(False, f"Ingestion failed: {str(e)}")

def test_search_question():
    """Test semantic search v·ªõi c√¢u h·ªèi ti·∫øng Vi·ªát"""
    print_test_header("Question Answering")
    
    questions = [
        "Ch√πa C·∫ßu H·ªôi An c√≥ g√¨ ƒë·∫∑c bi·ªát?",
        "Gi·ªù m·ªü c·ª≠a c·ªßa Ch√πa C·∫ßu nh∆∞ th·∫ø n√†o?",
        "Ph√≠ tham quan Ch√πa C·∫ßu bao nhi√™u?",
        "N√™n ƒëi tham quan Ch√πa C·∫ßu v√†o th·ªùi gian n√†o?"
    ]
    
    for question in questions:
        payload = {
            "cityId": TEST_CITY_ID,
            "query": question,
            "model": "deepseek-r1-distill-llama-70b"
        }
        
        try:
            response = requests.post(f"{RAG_SERVER_URL}/v1/question", json=payload)
            if response.status_code == 200:
                result = response.json()
                answer = result['choices'][0]['message']['content']
                documents = result['choices'][0]['message'].get('documents', [])
                print_result(True, f"Question: {question}")
                print(f"ü§ñ Answer: {answer[:200]}...")
                print(f"üìö Found {len(documents)} relevant documents")
            else:
                print_result(False, f"Question failed: {question}", response.text)
                
        except Exception as e:
            print_result(False, f"Question failed: {str(e)}")

def test_update_destination():
    """Test c·∫≠p nh·∫≠t destination"""
    print_test_header("Destination Update")
    
    # Updated data with new information
    updated_data = {
        "description": "Ch√πa C·∫ßu H·ªôi An (c√≤n g·ªçi l√† c·∫ßu Nh·∫≠t B·∫£n) l√† m·ªôt trong nh·ªØng bi·ªÉu t∆∞·ª£ng n·ªïi ti·∫øng nh·∫•t c·ªßa ph·ªë c·ªï H·ªôi An. ƒê∆∞·ª£c x√¢y d·ª±ng v√†o th·∫ø k·ª∑ 16 b·ªüi c·ªông ƒë·ªìng ng∆∞·ªùi Nh·∫≠t, ch√πa c√≥ ki·∫øn tr√∫c ƒë·ªôc ƒë√°o k·∫øt h·ª£p gi·ªØa Nh·∫≠t B·∫£n v√† Vi·ªát Nam. ƒê√¢y l√† di t√≠ch ƒë∆∞·ª£c UNESCO c√¥ng nh·∫≠n.",
        "highlight": "Ki·∫øn tr√∫c c·ªï k√≠nh, c·∫ßu c√≥ m√°i che, t∆∞·ª£ng kh·ªâ v√† ch√≥ canh g√°c, di s·∫£n UNESCO",
        "services": "Tham quan, ch·ª•p ·∫£nh, mua v√© v√†o c·ª≠a, h∆∞·ªõng d·∫´n vi√™n",
        "cultureType": "Di t√≠ch l·ªãch s·ª≠, ki·∫øn tr√∫c c·ªï, di s·∫£n th·∫ø gi·ªõi",
        "activities": "ƒêi b·ªô qua c·∫ßu, ch·ª•p ·∫£nh, t√¨m hi·ªÉu l·ªãch s·ª≠, ng·∫Øm c·∫£nh s√¥ng Thu B·ªìn",
        "fee": "V√© v√†o c·ª≠a ph·ªë c·ªï H·ªôi An: 120,000 VNƒê (c√≥ th·ªÉ thay ƒë·ªïi)",
        "usefulInfo": "N√™n ƒëi v√†o bu·ªïi s√°ng s·ªõm ho·∫∑c chi·ªÅu t·ªëi ƒë·ªÉ tr√°nh ƒë√¥ng ƒë√∫c, m·∫∑c trang ph·ª•c l·ªãch s·ª±, kh√¥ng ƒë∆∞·ª£c ch·∫°y xe m√°y qua c·∫ßu",
        "tags": "di t√≠ch l·ªãch s·ª≠, ph·ªë c·ªï H·ªôi An, ch√πa c·∫ßu, ki·∫øn tr√∫c Nh·∫≠t B·∫£n, UNESCO",
        "openHour": "M·ªü c·ª≠a 24/7 cho kh√°ch ƒëi b·ªô, tham quan chi ti·∫øt: 07:00-18:00",
        "contactInfo": "Phone: +84 235 3861 540, Website: hoianworldheritage.org.vn, Facebook: hoianheritage, Instagram: hoi_an_ancient_town"
    }
    
    payload = {
        "destinationId": TEST_DESTINATION_ID,
        "cityId": TEST_CITY_ID,
        "info": json.dumps(updated_data, ensure_ascii=False),
        "slug": "chua-cau-hoi-an",
        "name": "Ch√πa C·∫ßu H·ªôi An (C·∫ßu Nh·∫≠t B·∫£n)"
    }
    
    try:
        response = requests.post(f"{RAG_SERVER_URL}/v1/update", json=payload)
        if response.status_code == 200:
            result = response.json()
            print_result(True, f"Update successful", result)
        else:
            print_result(False, f"Update failed with status {response.status_code}", response.text)
            
    except Exception as e:
        print_result(False, f"Update failed: {str(e)}")

def test_chat_completion():
    """Test chat completion v·ªõi knowledge base"""
    print_test_header("Chat Completion")
    
    messages = [
        {"role": "user", "content": "T√¥i mu·ªën t√¨m hi·ªÉu v·ªÅ Ch√πa C·∫ßu H·ªôi An. B·∫°n c√≥ th·ªÉ cho t√¥i bi·∫øt th√¥ng tin chi ti·∫øt kh√¥ng?"}
    ]
    
    payload = {
        "messages": messages,
        "model": "deepseek-r1-distill-llama-70b",
        "isUseKnowledge": True,
        "cityId": TEST_CITY_ID,
        "userId": "test_user_123"
    }
    
    try:
        response = requests.post(f"{RAG_SERVER_URL}/v1/chat/completions", json=payload)
        if response.status_code == 200:
            result = response.json()
            answer = result['choices'][0]['message']['content']
            destinations = result['choices'][0]['message'].get('destinations', [])
            print_result(True, "Chat completion successful")
            print(f"ü§ñ Assistant: {answer[:300]}...")
            print(f"üìç Found {len(destinations)} related destinations")
        else:
            print_result(False, f"Chat completion failed with status {response.status_code}", response.text)
            
    except Exception as e:
        print_result(False, f"Chat completion failed: {str(e)}")

def test_delete_destination():
    """Test x√≥a destination"""
    print_test_header("Destination Deletion")
    
    payload = {
        "destiationId": TEST_DESTINATION_ID,  # Note: API c√≥ typo "destiation"
        "cityId": TEST_CITY_ID
    }
    
    try:
        response = requests.post(f"{RAG_SERVER_URL}/v1/delete-document", json=payload)
        if response.status_code == 200:
            result = response.json()
            print_result(True, f"Deletion successful", result)
        else:
            print_result(False, f"Deletion failed with status {response.status_code}", response.text)
            
    except Exception as e:
        print_result(False, f"Deletion failed: {str(e)}")

def run_all_tests():
    """Ch·∫°y t·∫•t c·∫£ c√°c test theo th·ª© t·ª±"""
    print(f"üöÄ Starting RAG Server Tests at {datetime.now()}")
    print(f"üåê Server URL: {RAG_SERVER_URL}")
    
    # 1. Health check
    test_health_check()
    time.sleep(1)
    
    # 2. Test ingestion
    test_ingest_destination()
    time.sleep(2)  # Wait for indexing
    
    # 3. Test search
    test_search_question()
    time.sleep(1)
    
    # 4. Test update
    test_update_destination()
    time.sleep(2)  # Wait for re-indexing
    
    # 5. Test chat completion
    test_chat_completion()
    time.sleep(1)
    
    # 6. Test deletion (cleanup)
    test_delete_destination()
    
    print(f"\nüéâ All tests completed at {datetime.now()}")
    print("=" * 60)

if __name__ == "__main__":
    run_all_tests()
